means <- numeric(nc)
means <- numeric(5)
means
means[5]
means[, 5]
means <- matrix(c(1, 2, 3, 4), ncol = 2)
means
means[, 4]
means[, 2]
means <- numeric(5)
means
means[5]
means[, 5]
means <- matrix(c(1, 2, 3, 4), ncol = 2)
means
means[, 4]
means[, 2]
library(datasets)
data(iris)
?iris
iris
View(iris)
mean(iris[iris[[Species]] = virginica][[Sepal.Length]])
mean(iris[iris[[Species]] == virginica][[Sepal.Length]])
mean(iris[iris[['Species']] == 'virginica'][['Sepal.Length']])
iris[['Species']] == 'virginica'
iris[iris[['Species']] == 'virginica']
iris[iris[['Species']] == 'virginica',]
iris[,iris[['Species']] == 'virginica']
iris[iris[['Species']] == 'virginica',]
mean(iris[iris[['Species']] == 'virginica',][['Sepal.Length']])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
View(mtcars)
View(mtcars)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
abs(tapply(mtcars$mpg, mtcars$cyl, mean)[[4]] - tapply(mtcars$mpg, mtcars$cyl, mean)[[8]])
abs(tapply(mtcars$mpg, mtcars$cyl, mean)[['4']] - tapply(mtcars$mpg, mtcars$cyl, mean)[['8']])
abs(tapply(mtcars$hp, mtcars$cyl, mean)[['4']] - tapply(mtcars$hp, mtcars$cyl, mean)[['8']])
debug(ls)
ls
s
load swirl
package(swirl)
swirl
library("swirl", lib.loc="C:/Users/nicol/.conda/envs/AnacondaR/lib/R/library")
detach("package:swirl", unload=TRUE)
library("swirl", lib.loc="C:/Users/nicol/.conda/envs/AnacondaR/lib/R/library")
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list(lapply(flags, class))
cls_list <- lapply(flags, class)
cls_list
class(cls_list())
class(cls_list
class(cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags[Orange])
sum(flags[]Orange]])
sum(flags[[Orange]])
sum(flags[[orange]])
head(flags)
sum(flags[['orange']])
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
sapply(flag_colors, sum)/194
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
detach("package:swirl", unload=TRUE)
x <- seq(1, 7, 0.01)
y <- dnorm(x, mean = 3.75)
y <- dnorm(x, mean = 3.75, sd = 0.2)
plot(x, y)
dnorm(0, mean = 0, sd = 1)
integrate(dnorm, -Inf, x)
integrate(dnorm, -Inf, 0.5)
integrate(dnorm, -Inf, 0)
qnorm(0.8413, 4.15, 0.2)
qnorm(0.8413-0.5, 4.15, 0.2)
qnorm(1-(0.8413-0.5), 4.15, 0.2)
qnorm(.5-(0.8413-0.5), 4.15, 0.2)
nlm
source('~/test.R', echo=TRUE)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
source('~/test.R', echo=TRUE)
source('~/test.R', echo=TRUE)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
source('~/test.R', echo=TRUE)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
source('~/test.R', echo=TRUE)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
source('~/test.R', echo=TRUE)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
nlm(find_mean_normal, 4, p = .8413, x = 3.95, sd_g = 0.2)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2)
integrate(dnorm, -Inf, 0.5)
source('~/test.R', echo=TRUE)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2)
source('~/test.R', echo=TRUE)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2)
nlm(find_mean_normal, 3.95, p = .8413, x = 3.95, sd_g = 0.2)
f <- function(x) sum((x-1:length(x))^2)
nlm(f, c(10,10))
nlm(f, c(10,10), print.level = 2)
utils::str(nlm(f, c(5), hessian = TRUE))
f <- function(x, a) sum((x-a)^2)
nlm(f, c(10,10), a = c(3,5))
f <- function(x, a)
{
res <- sum((x-a)^2)
attr(res, "gradient") <- 2*(x-a)
res
}
nlm(f, c(10,10), a = c(3,5))
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = 0)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps)
source('~/test.R', echo=TRUE)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps^0.25)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps^0.2)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps^0.1)
source('~/test.R', echo=TRUE)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps^0.1)
source('~/test.R', echo=TRUE)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps^0.1)
source('~/test.R', echo=TRUE)
source('~/test.R', echo=TRUE)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2, tol = .Machine$double.eps^0.1)
optimize(find_mean_normal, c(1, 7), p = .8413, x = 3.95, sd_g = 0.2)
setwd("~/ProgrammingAssignment2")
source('~/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
a <- makeCacheMatrix(matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE))
source('~/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
a <- makeCacheMatrix(matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE))
a <- makeCacheMatrix(matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE))
a <- makeCacheMatrix(matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE))
makeCacheMatrix
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
a <- makeCacheMatrix(matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE))
cacheSolve(a)
a <- makeCacheMatrix(matrix(c(1,2,3,11), nrow = 2, ncol = 2, byrow = TRUE))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
cacheSolve(a)
b <- makeCacheMatrix(matrix(c(1,2,3,11), nrow = 2, ncol = 2, byrow = TRUE))
cacheSolve(b)
b$set(matrix(c(1,2,3,11), nrow = 2, ncol = 2, byrow = TRUE))
c <- makeCacheMatrix(matrix(c(1,2,3,11), nrow = 2, ncol = 2, byrow = TRUE))
c$set(matrix(c(1,2,3,11), nrow = 2, ncol = 2, byrow = TRUE))
cacheSolve(c)
c$get()
c$setinverse()
c$setinverse(solve(c))
solve(matrix(c(1,2,3,11))
cxzsd
solve(matrix(c(1,2,3,11))
xc
s
solve(matrix(c(1,2,3,11)))
solve(matrix(c(1,2,3,11), , nrow = 2, ncol = 2, byrow = TRUE))
solve(matrix(c(1,2,3,11),  nrow = 2, ncol = 2, byrow = TRUE))
solve(matrix(c(1,2,3,11), nrow = 2, ncol = 2, byrow = TRUE))
solve(matrix(c(1,2,3,11), nrow = 2, ncol = 2, byrow = TRUE))
a <- matrix(c(1,2,3,11), nrow = 2, ncol = 2, byrow = TRUE)
det(a)
solve(a)
c<-rbind(c(1, -1/4), c(-1/4, 1))
solve(c)
solve(l)
l<-rbind(c(1, -1/4), c(-1/4, 1))
solve(l)
l
l<-rbind(c(1, -1/4), c(-1/4, 1))
a <- makeCacheMatrix()
a$set(l)
cacheSolve(a)
l
source('~/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
source('~/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
